{"ast":null,"code":"const GETMOVIESGENRES = 'movies/getGenreMovies';\n\n/* ___________ Action Creators   ___________ */\nexport const getMoviesGenresAction = genres => {\n  return {\n    type: GETMOVIESGENRES,\n    genres\n  };\n};\n\n/* ___________ T H U N K S   ___________ */\nexport const getMoviesGenresThunk = movie_id => async dispatch => {\n  const response = await fetch(`/api/genre/movie/${movie_id}`);\n  if (response.ok) {\n    const genres = await response.json();\n    dispatch(getMoviesGenresAction(genres));\n    return genres;\n  }\n};\n\n/* ___________ Tasks Reducer   ___________ */\nexport default function moviesGenresReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {};\n  switch (action.type) {\n    case GETMOVIESGENRES:\n      action.genres.forEach(genre => newState[genre.genre_id] = movie);\n      return newState;\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GETMOVIESGENRES","getMoviesGenresAction","genres","type","getMoviesGenresThunk","movie_id","dispatch","response","fetch","ok","json","moviesGenresReducer","state","action","newState","forEach","genre","genre_id","movie"],"sources":["/Users/alexiswest/Desktop/LEXFLIX/lexflix_proj/react-app/src/store/genresmovies.js"],"sourcesContent":["const GETMOVIESGENRES = 'movies/getGenreMovies'\n\n/* ___________ Action Creators   ___________ */\nexport const getMoviesGenresAction = (genres) => {\n    return {\n        type: GETMOVIESGENRES,\n        genres\n    }\n}\n\n/* ___________ T H U N K S   ___________ */\nexport const getMoviesGenresThunk = (movie_id) => async (dispatch) => {\n    const response = await fetch(`/api/genre/movie/${movie_id}`)\n    if (response.ok) {\n        const genres = await response.json()\n        dispatch(getMoviesGenresAction(genres))\n        return genres;\n    }\n}\n\n/* ___________ Tasks Reducer   ___________ */\nexport default function moviesGenresReducer(state={}, action) {\n    let newState = {};\n    switch(action.type){\n        case GETMOVIESGENRES:\n            action.genres.forEach(genre => newState[genre.genre_id] = movie)\n            return newState;\n        default:\n             return state\n    }\n}\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,uBAAuB;;AAE/C;AACA,OAAO,MAAMC,qBAAqB,GAAIC,MAAM,IAAK;EAC7C,OAAO;IACHC,IAAI,EAAEH,eAAe;IACrBE;EACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAME,oBAAoB,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EAClE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oBAAmBH,QAAS,EAAC,CAAC;EAC5D,IAAIE,QAAQ,CAACE,EAAE,EAAE;IACb,MAAMP,MAAM,GAAG,MAAMK,QAAQ,CAACG,IAAI,EAAE;IACpCJ,QAAQ,CAACL,qBAAqB,CAACC,MAAM,CAAC,CAAC;IACvC,OAAOA,MAAM;EACjB;AACJ,CAAC;;AAED;AACA,eAAe,SAASS,mBAAmB,GAAmB;EAAA,IAAlBC,KAAK,uEAAC,CAAC,CAAC;EAAA,IAAEC,MAAM;EACxD,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,QAAOD,MAAM,CAACV,IAAI;IACd,KAAKH,eAAe;MAChBa,MAAM,CAACX,MAAM,CAACa,OAAO,CAACC,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAACC,QAAQ,CAAC,GAAGC,KAAK,CAAC;MAChE,OAAOJ,QAAQ;IACnB;MACK,OAAOF,KAAK;EAAA;AAEzB"},"metadata":{},"sourceType":"module"}