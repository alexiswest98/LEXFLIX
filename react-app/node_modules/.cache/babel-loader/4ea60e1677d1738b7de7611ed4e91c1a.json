{"ast":null,"code":"//FULL CRUD\n\n/* ----- TYPES ------ */\nconst GETALLREVIEWS = 'reviews/getAllReviews';\nconst GETREVIEW = 'reviews/getReview';\nconst ADDREVIEW = \"review/addReview\";\nconst EDITREVIEW = \"review/editReview\";\nconst DELETEREVIEW = 'review/deleteReview';\n\n/* ----- ACTIONS ------ */\nconst getAllReviewsAction = reviews => {\n  return {\n    type: GETALLREVIEWS,\n    reviews\n  };\n};\nconst getReviewAction = review => {\n  return {\n    type: GETREVIEW,\n    review\n  };\n};\nconst addReviewAction = review => {\n  return {\n    type: ADDREVIEW,\n    review\n  };\n};\nconst editReviewAction = review => {\n  return {\n    type: EDITREVIEW,\n    review\n  };\n};\nconst deleteReviewAction = reviewId => {\n  return {\n    type: DELETEREVIEW,\n    reviewId\n  };\n};\n\n/* ------ THUNKS ------ */\nexport const getAllReviewsThunk = profileId => async dispatch => {\n  const response = await fetch(`/api/review/profile/${profileId}/all`);\n  if (response.ok) {\n    const reviews = await response.json();\n    dispatch(getAllReviewsAction(reviews));\n    return reviews;\n  }\n};\nexport const getReviewThunk = (profileId, movieId) => async dispatch => {\n  const response = await fetch(`/api/review/profile/${profileId}/movie/${movieId}`);\n  if (response.ok) {\n    const review = await response.json();\n    dispatch(getReviewAction(review));\n    return review;\n  }\n};\nexport const addReviewThunk = (profileId, movieId, review) => async dispatch => {\n  const response = await fetch(`/api/review/profile/${profileId}/movie/${movieId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(review)\n  });\n  if (response.ok) {\n    const newReview = await response.json();\n    await dispatch(addReviewAction(newReview));\n    return newReview;\n  }\n};\nexport const editReviewThunk = review => async dispatch => {\n  const response = await fetch(`/api/review/${review.id}/edit`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(review)\n  });\n  if (response.ok) {\n    const newReview = await response.json();\n    await dispatch(editReviewAction(newReview));\n    return newReview;\n  }\n};\nexport const deleteReviewThunk = reviewId => async dispatch => {\n  const response = await fetch(`/api/review/${reviewId}/delete`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    const review = await response.json();\n    await dispatch(deleteReviewAction(reviewId));\n  }\n};\n\n/* ------ REDUCER ------ */\nconst reviewsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {};\n  switch (action.type) {\n    case GETALLREVIEWS:\n      action.reviews.forEach(review => {\n        newState[review.id] = review;\n      });\n      return newState;\n    case GETREVIEW:\n      newState = {\n        ...state\n      };\n      newState[action.review.id] = {\n        ...newState[action.review.id],\n        ...action.review\n      };\n    case ADDREVIEW:\n      newState = {\n        ...state\n      };\n      newState[action.review.id] = action.review;\n      return newState;\n    case EDITREVIEW:\n      newState = {\n        ...state\n      };\n      newState[action.review.id] = {\n        ...newState[action.review.id],\n        ...action.review\n      };\n      return newState;\n    case DELETEREVIEW:\n      newState = {\n        ...state\n      };\n      delete newState[action.reviewId];\n      return newState;\n    default:\n      return state;\n  }\n};\nexport default reviewsReducer;","map":{"version":3,"names":["GETALLREVIEWS","GETREVIEW","ADDREVIEW","EDITREVIEW","DELETEREVIEW","getAllReviewsAction","reviews","type","getReviewAction","review","addReviewAction","editReviewAction","deleteReviewAction","reviewId","getAllReviewsThunk","profileId","dispatch","response","fetch","ok","json","getReviewThunk","movieId","addReviewThunk","method","headers","body","JSON","stringify","newReview","editReviewThunk","id","deleteReviewThunk","reviewsReducer","state","action","newState","forEach"],"sources":["/Users/alexiswest/Desktop/LEXFLIX/lexflix_proj/react-app/src/store/reviews.js"],"sourcesContent":["//FULL CRUD\n\n/* ----- TYPES ------ */\nconst GETALLREVIEWS = 'reviews/getAllReviews'\nconst GETREVIEW = 'reviews/getReview'\nconst ADDREVIEW = \"review/addReview\";\nconst EDITREVIEW = \"review/editReview\";\nconst DELETEREVIEW = 'review/deleteReview';\n\n/* ----- ACTIONS ------ */\nconst getAllReviewsAction = (reviews) => {\n    return {\n        type: GETALLREVIEWS,\n        reviews\n    }\n};\n\nconst getReviewAction = (review) => {\n    return {\n        type: GETREVIEW,\n        review\n    }\n};\n\nconst addReviewAction = (review) => {\n    return {\n        type: ADDREVIEW,\n        review\n    }\n};\n\nconst editReviewAction = (review) => {\n    return {\n        type: EDITREVIEW,\n        review\n    }\n};\n\nconst deleteReviewAction = (reviewId) => {\n    return {\n        type: DELETEREVIEW,\n        reviewId\n    }\n};\n \n\n/* ------ THUNKS ------ */\nexport const getAllReviewsThunk = (profileId) => async dispatch => {\n    const response = await fetch(`/api/review/profile/${profileId}/all`);\n\n    if (response.ok) {\n        const reviews = await response.json();\n        dispatch(getAllReviewsAction(reviews))\n        return reviews;\n    }\n};\n\nexport const getReviewThunk = (profileId, movieId) => async dispatch => {\n    const response = await fetch(`/api/review/profile/${profileId}/movie/${movieId}`);\n\n    if (response.ok) {\n        const review = await response.json();\n        dispatch(getReviewAction(review))\n        return review;\n    }\n};\n\nexport const addReviewThunk = (profileId, movieId, review) => async dispatch => {\n    const response = await fetch(`/api/review/profile/${profileId}/movie/${movieId}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(review)\n    });\n\n    if (response.ok) {\n        const newReview = await response.json();\n        await dispatch(addReviewAction(newReview));\n        return newReview;\n    }\n};\n\nexport const editReviewThunk = (review) => async dispatch => {\n    const response = await fetch(`/api/review/${review.id}/edit`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(review)\n    });\n\n    if (response.ok) {\n        const newReview = await response.json();\n        await dispatch(editReviewAction(newReview));\n        return newReview;\n    }\n};\n\nexport const deleteReviewThunk = (reviewId) => async dispatch => {\n    const response = await fetch(`/api/review/${reviewId}/delete`, {\n        method: 'DELETE'\n    });\n\n    if (response.ok) {\n        const review = await response.json();\n        await dispatch(deleteReviewAction(reviewId));\n    }\n};\n\n\n/* ------ REDUCER ------ */\nconst reviewsReducer = (state = {}, action) => {\n    let newState = {};\n    switch (action.type) {\n        case GETALLREVIEWS:\n            action.reviews.forEach((review) => {\n                newState[review.id] = review;\n            });\n            return newState;\n        case GETREVIEW:\n            newState = { ...state };\n            newState[action.review.id] = { ...newState[action.review.id], ...action.review}\n        case ADDREVIEW:\n            newState = { ...state };\n            newState[action.review.id] = action.review;\n            return newState;\n        case EDITREVIEW:\n            newState = { ...state };\n            newState[action.review.id] = { ...newState[action.review.id], ...action.review}\n            return newState;\n        case DELETEREVIEW:\n            newState = { ...state };\n            delete newState[action.reviewId];\n            return newState;\n        default:\n            return state;\n    }\n\n}\n\nexport default reviewsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}